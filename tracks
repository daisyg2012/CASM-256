import cadquery as cq
from math import sin, cos, pi

def bolt():
    #creds to eddie liberato on github -- will replace soon with a proper anchor bolt
    length = 32 * 2
    minor_diameter = 15.0 * 2
    pitch = 4.9 * 2

    pts = []

    for i in range(length):
        x = minor_diameter/2*cos(i)
        y = minor_diameter/2*sin(i)
        z = pitch/(2*pi)*i
        pts.append([x,y,z])

    path = cq.Workplane("XY").spline(pts).wire()
    thread = cq.Workplane("XZ").move(minor_diameter, 0).line(6.4, 1).line(0,2.0).line(-6.4, 1).close().sweep(path, isFrenet=True)

    foot = cq.Workplane("XY").circle(28).extrude(100.0) .\
    faces("<Z").workplane().polygon(6,92.0).extrude(30.0) .\
    faces("<Z").workplane().hole(14.0, 42.0).translate((0,0,pitch/2.0))

    foot = foot.union(thread)
    
    return foot



def track_supports():

    platform =(
    cq.Workplane("XY")
    .box(800,500,4)
    ) 
    assy = (
        cq.Assembly()
        .add(platform, name = "platform", color = cq.Color("tan4"))
        .add(bolt(), name =  "bolt1", loc = cq.Location(320,180,23), color = cq.Color("tan4"))
        .add(bolt(), name =  "bolt2",loc = cq.Location(-320,180,23), color = cq.Color("tan4"))
        .add(bolt(), name =  "bolt3",loc = cq.Location(320,-180,23), color = cq.Color("tan4"))
        .add(bolt(), name =  "bolt4",loc = cq.Location(-320,-180,23), color = cq.Color("tan4"))
        )
    
    
    
    return assy



def train_tracks():
    
    train_track = (
    cq.Workplane("XY")
    .box(360,22000,450)
    .edges("|Y")  # edges parallel to X (horizontal in front/back)
    .filter(lambda e: e.startPoint().z > 9.9)
    .fillet(90)
    )
    
    tracks = (
    cq.Assembly()
    .add(train_track,loc = cq.Location(0,0,225), color = cq.Color("tan4"))
    .add(train_track,loc = cq.Location(3048,0,225),color = cq.Color("tan4"))
    )
    return tracks

show_object(train_tracks())

def plank():
    vinyl_thickness = 38.1
    plank_width = 3050
    plank_depth = 139.7


    plank = (
    cq.Workplane("XY")
    .box(plank_width, plank_depth, vinyl_thickness)
    )

    return plank

# each plank is separated by roughly 50cm

plank_series = cq.Assembly()

for i in range(43):
    y_pos = i * 500
    
    plank_series.add(plank(),loc=cq.Location(cq.Vector(1524, (y_pos-10500), 470)), color = cq.Color("navajowhite4"))
    
show_object(plank_series)


width = 3048       
length = 22000     
wire_thickness = 2
wire_height = 1.5


num_vertical = 151 

spacing = (width - wire_thickness) / (num_vertical - 1)

num_horizontal = int((length - wire_thickness) / spacing) + 1

length = (num_horizontal - 1) * spacing + wire_thickness

def make_horizontal_wire():
    return cq.Workplane("XY").box(width, wire_thickness, wire_height)

def make_vertical_wire():
    return cq.Workplane("XY").box(wire_thickness, length, wire_height)

mesh = cq.Assembly()

# horizontal)
for i in range(num_horizontal):
    y_pos = -length / 2 + i * spacing
    mesh.add(make_horizontal_wire(),
             loc=cq.Location(cq.Vector(1524, y_pos, 410)),
             color=cq.Color("gray"))

#  vertical
for j in range(num_vertical):
    x_pos = -width / 2 + j * spacing
    mesh.add(make_vertical_wire(),
             loc=cq.Location(cq.Vector(x_pos + 1524, 0, 410)),
             color=cq.Color("gray"))

show_object(mesh)

track_supp = cq.Assembly()

for k in range(5):
    track_supp.add(track_supports(),
    loc=cq.Location(0,2500 * k,0))
    track_supp.add(track_supports(),
    loc=cq.Location(3048,2500 * k,0))
    track_supp.add(track_supports(),
    loc=cq.Location(0,2500 * k * -1,0))
    track_supp.add(track_supports(),
    loc=cq.Location(3048,2500 * k * -1,0))
    
    
show_object(track_supp)
